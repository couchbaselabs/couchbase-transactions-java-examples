buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

apply plugin: 'java'
apply plugin: 'application'

version '1.0.0'

mainClassName = 'example.docker.Application'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
    // Temporary
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    implementation 'ch.qos.logback:logback-classic:1.1.11'
    // 1.2.0-SNAPSHOT required for OpenTelemetry support
    compile group: 'com.couchbase.client', name: 'couchbase-transactions', version: '1.2.2-SNAPSHOT'
    compile group: 'com.couchbase.client', name: 'java-client', version: '3.0.8'
    implementation 'net.sourceforge.argparse4j:argparse4j:0.8.1'

    // These dependencies needed only for the Docker example
    compile 'com.moandjiezana.toml:toml4j:0.7.2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    compile 'io.prometheus:simpleclient:0.9.0'
    compile 'io.prometheus:simpleclient_hotspot:0.9.0'
    compile 'io.prometheus:simpleclient_httpserver:0.9.0'
    compile('io.opentelemetry:opentelemetry-api:0.8.0')
    compile('io.opentelemetry:opentelemetry-sdk:0.8.0')
    compile('io.opentelemetry:opentelemetry-exporters-inmemory:0.8.0')
    compile('io.opentelemetry:opentelemetry-exporters-zipkin:0.8.0')
    compile('com.devskiller:jfairy:0.6.4')
}

task game(type:JavaExec) {
    main = 'example.game.GameExample'
    classpath = sourceSets.main.runtimeClasspath
}

task transfer(type:JavaExec) {
    main = 'example.transfer.TransferExample'
    classpath = sourceSets.main.runtimeClasspath
}

task docker(type:JavaExec) {
    main = 'example.docker.Application'
    classpath = sourceSets.main.runtimeClasspath
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
}
